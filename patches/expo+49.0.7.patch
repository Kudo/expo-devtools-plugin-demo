diff --git a/node_modules/expo/build/Expo.d.ts b/node_modules/expo/build/Expo.d.ts
index e3aec9d..69b75a5 100644
--- a/node_modules/expo/build/Expo.d.ts
+++ b/node_modules/expo/build/Expo.d.ts
@@ -3,4 +3,5 @@ import * as Logs from './logs/Logs';
 export { Logs };
 export { disableErrorHandling } from './errors/ExpoErrorManager';
 export { default as registerRootComponent } from './launch/registerRootComponent';
+export { getDevToolsPluginClientAsync, useDevToolsPluginClient } from './devtools';
 //# sourceMappingURL=Expo.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/Expo.d.ts.map b/node_modules/expo/build/Expo.d.ts.map
index ae27162..108bdb4 100644
--- a/node_modules/expo/build/Expo.d.ts.map
+++ b/node_modules/expo/build/Expo.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Expo.d.ts","sourceRoot":"","sources":["../src/Expo.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,CAAC;AAEnB,OAAO,KAAK,IAAI,MAAM,aAAa,CAAC;AAEpC,OAAO,EAAE,IAAI,EAAE,CAAC;AAChB,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AACjE,OAAO,EAAE,OAAO,IAAI,qBAAqB,EAAE,MAAM,gCAAgC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"Expo.d.ts","sourceRoot":"","sources":["../src/Expo.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,CAAC;AAEnB,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AACjE,OAAO,EAAE,OAAO,IAAI,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AAClF,OAAO,EAAE,iBAAiB,EAAE,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;AACjF,OAAO,KAAK,QAAQ,MAAM,YAAY,CAAC;AACvC,OAAO,EAAE,mBAAmB,EAAE,2BAA2B,EAAE,MAAM,mBAAmB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo/build/Expo.js b/node_modules/expo/build/Expo.js
index dd29cf1..b21cfeb 100644
--- a/node_modules/expo/build/Expo.js
+++ b/node_modules/expo/build/Expo.js
@@ -3,4 +3,5 @@ import * as Logs from './logs/Logs';
 export { Logs };
 export { disableErrorHandling } from './errors/ExpoErrorManager';
 export { default as registerRootComponent } from './launch/registerRootComponent';
+export { getDevToolsPluginClientAsync, useDevToolsPluginClient } from './devtools';
 //# sourceMappingURL=Expo.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClient.d.ts b/node_modules/expo/build/devtools/DevToolsPluginClient.d.ts
new file mode 100644
index 0000000..8e862e1
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClient.d.ts
@@ -0,0 +1,46 @@
+import { EventEmitter, EventSubscription } from 'fbemitter';
+import type { ConnectionInfo } from './devtools.types';
+export declare const MESSAGE_PROTOCOL_VERSION = 2;
+export declare const DevToolsPluginMethod = "Expo:DevToolsPlugin";
+/**
+ * This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.
+ * All the code should be both compatible with browsers and React Native.
+ */
+export declare abstract class DevToolsPluginClient {
+    readonly connectionInfo: ConnectionInfo;
+    protected eventEmitter: EventEmitter;
+    constructor(connectionInfo: ConnectionInfo);
+    /**
+     * Initialize the connection.
+     * @hidden
+     */
+    abstract initAsync(): Promise<void>;
+    /**
+     * Close the connection.
+     */
+    abstract closeAsync(): Promise<void>;
+    /**
+     * Send a message to the other end of DevTools.
+     * @param method A method name.
+     * @param params any extra payload.
+     */
+    abstract sendMessage(method: string, params: any): void;
+    /**
+     * Subscribe to a message from the other end of DevTools.
+     * @param method Subscribe to a message with a method name.
+     * @param listener Listener to be called when a message is received.
+     */
+    addMessageListener(method: string, listener: (params: any) => void): EventSubscription;
+    /**
+     * Subscribe to a message from the other end of DevTools just once.
+     * @param method Subscribe to a message with a method name.
+     * @param listener Listener to be called when a message is received.
+     */
+    addMessageListenerOnce(method: string, listener: (params: any) => void): void;
+    /**
+     * Returns whether the client is connected to the server.
+     */
+    abstract isConnected(): boolean;
+    protected handleMessage: (event: WebSocketMessageEvent) => void;
+}
+//# sourceMappingURL=DevToolsPluginClient.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClient.d.ts.map b/node_modules/expo/build/devtools/DevToolsPluginClient.d.ts.map
new file mode 100644
index 0000000..4cee911
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClient.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"DevToolsPluginClient.d.ts","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClient.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAE5D,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAGvD,eAAO,MAAM,wBAAwB,IAAI,CAAC;AAE1C,eAAO,MAAM,oBAAoB,wBAAwB,CAAC;AAE1D;;;GAGG;AACH,8BAAsB,oBAAoB;aAGL,cAAc,EAAE,cAAc;IAFjE,SAAS,CAAC,YAAY,EAAE,YAAY,CAAsB;gBAEvB,cAAc,EAAE,cAAc;IAEjE;;;OAGG;aACa,SAAS,IAAI,OAAO,CAAC,IAAI,CAAC;IAE1C;;OAEG;aACa,UAAU,IAAI,OAAO,CAAC,IAAI,CAAC;IAE3C;;;;OAIG;aACa,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,IAAI;IAE9D;;;;OAIG;IACI,kBAAkB,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,GAAG,iBAAiB;IAI7F;;;;OAIG;IACI,sBAAsB,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,GAAG,IAAI;IAIpF;;OAEG;aACa,WAAW,IAAI,OAAO;IAEtC,SAAS,CAAC,aAAa,UAAW,qBAAqB,KAAG,IAAI,CAiB5D;CACH"}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClient.js b/node_modules/expo/build/devtools/DevToolsPluginClient.js
new file mode 100644
index 0000000..5c406ed
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClient.js
@@ -0,0 +1,49 @@
+import { EventEmitter } from 'fbemitter';
+// This version should be synced with the one in the **createMessageSocketEndpoint.ts** in @react-native-community/cli-server-api
+export const MESSAGE_PROTOCOL_VERSION = 2;
+export const DevToolsPluginMethod = 'Expo:DevToolsPlugin';
+/**
+ * This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.
+ * All the code should be both compatible with browsers and React Native.
+ */
+export class DevToolsPluginClient {
+    connectionInfo;
+    eventEmitter = new EventEmitter();
+    constructor(connectionInfo) {
+        this.connectionInfo = connectionInfo;
+    }
+    /**
+     * Subscribe to a message from the other end of DevTools.
+     * @param method Subscribe to a message with a method name.
+     * @param listener Listener to be called when a message is received.
+     */
+    addMessageListener(method, listener) {
+        return this.eventEmitter.addListener(method, listener);
+    }
+    /**
+     * Subscribe to a message from the other end of DevTools just once.
+     * @param method Subscribe to a message with a method name.
+     * @param listener Listener to be called when a message is received.
+     */
+    addMessageListenerOnce(method, listener) {
+        this.eventEmitter.once(method, listener);
+    }
+    handleMessage = (event) => {
+        let payload;
+        try {
+            payload = JSON.parse(event.data);
+        }
+        catch (e) {
+            console.debug('Failed to parse JSON', e);
+            return;
+        }
+        if (payload.version !== MESSAGE_PROTOCOL_VERSION || payload.method !== DevToolsPluginMethod) {
+            return;
+        }
+        if (payload.pluginName && payload.pluginName !== this.connectionInfo.pluginName) {
+            return;
+        }
+        this.eventEmitter.emit(payload.params.method, payload.params.params);
+    };
+}
+//# sourceMappingURL=DevToolsPluginClient.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClient.js.map b/node_modules/expo/build/devtools/DevToolsPluginClient.js.map
new file mode 100644
index 0000000..1c3fb8b
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClient.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"DevToolsPluginClient.js","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClient.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAqB,MAAM,WAAW,CAAC;AAI5D,iIAAiI;AACjI,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,CAAC;AAE1C,MAAM,CAAC,MAAM,oBAAoB,GAAG,qBAAqB,CAAC;AAE1D;;;GAGG;AACH,MAAM,OAAgB,oBAAoB;IAGL;IAFzB,YAAY,GAAiB,IAAI,YAAY,EAAE,CAAC;IAE1D,YAAmC,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAoBrE;;;;OAIG;IACI,kBAAkB,CAAC,MAAc,EAAE,QAA+B;QACvE,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACzD,CAAC;IAED;;;;OAIG;IACI,sBAAsB,CAAC,MAAc,EAAE,QAA+B;QAC3E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAOS,aAAa,GAAG,CAAC,KAA4B,EAAQ,EAAE;QAC/D,IAAI,OAAO,CAAC;QACZ,IAAI;YACF,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAClC;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;YACzC,OAAO;SACR;QAED,IAAI,OAAO,CAAC,OAAO,KAAK,wBAAwB,IAAI,OAAO,CAAC,MAAM,KAAK,oBAAoB,EAAE;YAC3F,OAAO;SACR;QACD,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,KAAK,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;YAC/E,OAAO;SACR;QAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvE,CAAC,CAAC;CACH","sourcesContent":["import { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport type { ConnectionInfo } from './devtools.types';\n\n// This version should be synced with the one in the **createMessageSocketEndpoint.ts** in @react-native-community/cli-server-api\nexport const MESSAGE_PROTOCOL_VERSION = 2;\n\nexport const DevToolsPluginMethod = 'Expo:DevToolsPlugin';\n\n/**\n * This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.\n * All the code should be both compatible with browsers and React Native.\n */\nexport abstract class DevToolsPluginClient {\n  protected eventEmitter: EventEmitter = new EventEmitter();\n\n  public constructor(public readonly connectionInfo: ConnectionInfo) {}\n\n  /**\n   * Initialize the connection.\n   * @hidden\n   */\n  public abstract initAsync(): Promise<void>;\n\n  /**\n   * Close the connection.\n   */\n  public abstract closeAsync(): Promise<void>;\n\n  /**\n   * Send a message to the other end of DevTools.\n   * @param method A method name.\n   * @param params any extra payload.\n   */\n  public abstract sendMessage(method: string, params: any): void;\n\n  /**\n   * Subscribe to a message from the other end of DevTools.\n   * @param method Subscribe to a message with a method name.\n   * @param listener Listener to be called when a message is received.\n   */\n  public addMessageListener(method: string, listener: (params: any) => void): EventSubscription {\n    return this.eventEmitter.addListener(method, listener);\n  }\n\n  /**\n   * Subscribe to a message from the other end of DevTools just once.\n   * @param method Subscribe to a message with a method name.\n   * @param listener Listener to be called when a message is received.\n   */\n  public addMessageListenerOnce(method: string, listener: (params: any) => void): void {\n    this.eventEmitter.once(method, listener);\n  }\n\n  /**\n   * Returns whether the client is connected to the server.\n   */\n  public abstract isConnected(): boolean;\n\n  protected handleMessage = (event: WebSocketMessageEvent): void => {\n    let payload;\n    try {\n      payload = JSON.parse(event.data);\n    } catch (e) {\n      console.debug('Failed to parse JSON', e);\n      return;\n    }\n\n    if (payload.version !== MESSAGE_PROTOCOL_VERSION || payload.method !== DevToolsPluginMethod) {\n      return;\n    }\n    if (payload.pluginName && payload.pluginName !== this.connectionInfo.pluginName) {\n      return;\n    }\n\n    this.eventEmitter.emit(payload.params.method, payload.params.params);\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientFactory.d.ts b/node_modules/expo/build/devtools/DevToolsPluginClientFactory.d.ts
new file mode 100644
index 0000000..aff5067
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientFactory.d.ts
@@ -0,0 +1,8 @@
+import type { DevToolsPluginClient } from './DevToolsPluginClient';
+import type { ConnectionInfo } from './devtools.types';
+/**
+ * Factory of DevToolsPluginClient based on sender types.
+ * @hidden
+ */
+export declare function createDevToolsPluginClient(connectionInfo: ConnectionInfo): Promise<DevToolsPluginClient>;
+//# sourceMappingURL=DevToolsPluginClientFactory.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientFactory.d.ts.map b/node_modules/expo/build/devtools/DevToolsPluginClientFactory.d.ts.map
new file mode 100644
index 0000000..7cacbd6
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientFactory.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"DevToolsPluginClientFactory.d.ts","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClientFactory.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAGnE,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAEvD;;;GAGG;AACH,wBAAsB,0BAA0B,CAC9C,cAAc,EAAE,cAAc,GAC7B,OAAO,CAAC,oBAAoB,CAAC,CAS/B"}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientFactory.js b/node_modules/expo/build/devtools/DevToolsPluginClientFactory.js
new file mode 100644
index 0000000..2fe1de6
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientFactory.js
@@ -0,0 +1,18 @@
+import { DevToolsPluginClientImplApp } from './DevToolsPluginClientImplApp';
+import { DevToolsPluginClientImplBrowser } from './DevToolsPluginClientImplBrowser';
+/**
+ * Factory of DevToolsPluginClient based on sender types.
+ * @hidden
+ */
+export async function createDevToolsPluginClient(connectionInfo) {
+    let client;
+    if (connectionInfo.sender === 'app') {
+        client = new DevToolsPluginClientImplApp(connectionInfo);
+    }
+    else {
+        client = new DevToolsPluginClientImplBrowser(connectionInfo);
+    }
+    await client.initAsync();
+    return client;
+}
+//# sourceMappingURL=DevToolsPluginClientFactory.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientFactory.js.map b/node_modules/expo/build/devtools/DevToolsPluginClientFactory.js.map
new file mode 100644
index 0000000..a276309
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientFactory.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"DevToolsPluginClientFactory.js","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClientFactory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,2BAA2B,EAAE,MAAM,+BAA+B,CAAC;AAC5E,OAAO,EAAE,+BAA+B,EAAE,MAAM,mCAAmC,CAAC;AAGpF;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,cAA8B;IAE9B,IAAI,MAA4B,CAAC;IACjC,IAAI,cAAc,CAAC,MAAM,KAAK,KAAK,EAAE;QACnC,MAAM,GAAG,IAAI,2BAA2B,CAAC,cAAc,CAAC,CAAC;KAC1D;SAAM;QACL,MAAM,GAAG,IAAI,+BAA+B,CAAC,cAAc,CAAC,CAAC;KAC9D;IACD,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;IACzB,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import type { DevToolsPluginClient } from './DevToolsPluginClient';\nimport { DevToolsPluginClientImplApp } from './DevToolsPluginClientImplApp';\nimport { DevToolsPluginClientImplBrowser } from './DevToolsPluginClientImplBrowser';\nimport type { ConnectionInfo } from './devtools.types';\n\n/**\n * Factory of DevToolsPluginClient based on sender types.\n * @hidden\n */\nexport async function createDevToolsPluginClient(\n  connectionInfo: ConnectionInfo\n): Promise<DevToolsPluginClient> {\n  let client: DevToolsPluginClient;\n  if (connectionInfo.sender === 'app') {\n    client = new DevToolsPluginClientImplApp(connectionInfo);\n  } else {\n    client = new DevToolsPluginClientImplBrowser(connectionInfo);\n  }\n  await client.initAsync();\n  return client;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.d.ts b/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.d.ts
new file mode 100644
index 0000000..22e92d0
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.d.ts
@@ -0,0 +1,41 @@
+import { DevToolsPluginClient } from './DevToolsPluginClient';
+/**
+ * The DevToolsPluginClient for the app -> browser communication.
+ */
+export declare class DevToolsPluginClientImplApp extends DevToolsPluginClient {
+    private browserClientMap;
+    private static ws;
+    private static refCount;
+    /**
+     * Initialize the connection.
+     * @hidden
+     */
+    initAsync(): Promise<void>;
+    /**
+     * Close the connection.
+     */
+    closeAsync(): Promise<void>;
+    /**
+     * Send a message to the other end of DevTools.
+     * @param method A method name.
+     * @param params any extra payload.
+     */
+    sendMessage(method: string, params: any): void;
+    /**
+     * Returns whether the client is connected to the server.
+     */
+    isConnected(): boolean;
+    /**
+     * Get the WebSocket instance. Exposed for testing.
+     * @hidden
+     */
+    static getWebSocket(): WebSocket | null;
+    /**
+     * Get the current reference count. Exposed for testing.
+     * @hidden
+     */
+    static getRefCount(): number;
+    private connectAsync;
+    private addHandshakeHandler;
+}
+//# sourceMappingURL=DevToolsPluginClientImplApp.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.d.ts.map b/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.d.ts.map
new file mode 100644
index 0000000..e167981
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"DevToolsPluginClientImplApp.d.ts","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClientImplApp.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,oBAAoB,EAGrB,MAAM,wBAAwB,CAAC;AAGhC;;GAEG;AACH,qBAAa,2BAA4B,SAAQ,oBAAoB;IAEnE,OAAO,CAAC,gBAAgB,CAA8B;IAEtD,OAAO,CAAC,MAAM,CAAC,EAAE,CAA0B;IAC3C,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAa;IAEpC;;;OAGG;IACY,SAAS,IAAI,OAAO,CAAC,IAAI,CAAC;IASzC;;OAEG;IACY,UAAU,IAAI,OAAO,CAAC,IAAI,CAAC;IAU1C;;;;OAIG;IACM,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,IAAI;IAiBvD;;OAEG;IACM,WAAW,IAAI,OAAO;IAI/B;;;OAGG;WACW,YAAY,IAAI,SAAS,GAAG,IAAI;IAI9C;;;OAGG;WACW,WAAW,IAAI,MAAM;YAIrB,YAAY;IAgB1B,OAAO,CAAC,mBAAmB;CAY5B"}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.js b/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.js
new file mode 100644
index 0000000..fbf5eaf
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.js
@@ -0,0 +1,100 @@
+import { DevToolsPluginClient, DevToolsPluginMethod, MESSAGE_PROTOCOL_VERSION, } from './DevToolsPluginClient';
+/**
+ * The DevToolsPluginClient for the app -> browser communication.
+ */
+export class DevToolsPluginClientImplApp extends DevToolsPluginClient {
+    // Map of pluginName -> browserClientId
+    browserClientMap = {};
+    static ws = null;
+    static refCount = 0;
+    /**
+     * Initialize the connection.
+     * @hidden
+     */
+    async initAsync() {
+        if (DevToolsPluginClientImplApp.ws == null) {
+            DevToolsPluginClientImplApp.ws = await this.connectAsync();
+        }
+        DevToolsPluginClientImplApp.refCount += 1;
+        DevToolsPluginClientImplApp.ws.addEventListener('message', this.handleMessage);
+        this.addHandshakeHandler();
+    }
+    /**
+     * Close the connection.
+     */
+    async closeAsync() {
+        this.eventEmitter.removeAllListeners();
+        DevToolsPluginClientImplApp.ws?.removeEventListener('message', this.handleMessage);
+        DevToolsPluginClientImplApp.refCount -= 1;
+        if (DevToolsPluginClientImplApp.refCount < 1) {
+            DevToolsPluginClientImplApp.ws?.close();
+            DevToolsPluginClientImplApp.ws = null;
+        }
+    }
+    /**
+     * Send a message to the other end of DevTools.
+     * @param method A method name.
+     * @param params any extra payload.
+     */
+    sendMessage(method, params) {
+        if (!this.isConnected()) {
+            throw new Error('Unable to send message in a disconnected state.');
+        }
+        const payload = {
+            version: MESSAGE_PROTOCOL_VERSION,
+            pluginName: this.connectionInfo.pluginName,
+            method: DevToolsPluginMethod,
+            params: {
+                method,
+                params,
+            },
+        };
+        DevToolsPluginClientImplApp.ws?.send(JSON.stringify(payload));
+    }
+    /**
+     * Returns whether the client is connected to the server.
+     */
+    isConnected() {
+        return DevToolsPluginClientImplApp.ws?.readyState === WebSocket.OPEN;
+    }
+    /**
+     * Get the WebSocket instance. Exposed for testing.
+     * @hidden
+     */
+    static getWebSocket() {
+        return DevToolsPluginClientImplApp.ws;
+    }
+    /**
+     * Get the current reference count. Exposed for testing.
+     * @hidden
+     */
+    static getRefCount() {
+        return DevToolsPluginClientImplApp.refCount;
+    }
+    async connectAsync() {
+        return new Promise((resolve, reject) => {
+            const ws = new WebSocket(`ws://${this.connectionInfo.devServer}/message`);
+            ws.addEventListener('open', () => {
+                resolve(ws);
+            });
+            ws.addEventListener('error', (e) => {
+                reject(e);
+            });
+            ws.addEventListener('close', (e) => {
+                console.debug('WebSocket closed', e.code, e.reason);
+                DevToolsPluginClientImplApp.ws = null;
+            });
+        });
+    }
+    addHandshakeHandler() {
+        this.addMessageListener('handshake', (params) => {
+            const previousBrowserClientId = this.browserClientMap[params.pluginName];
+            if (previousBrowserClientId != null && previousBrowserClientId !== params.browserClientId) {
+                console.debug(`Terminate the previous browser client connection - previousBrowserClientId[${previousBrowserClientId}]`);
+                this.sendMessage('terminateBrowserClient', { browserClientId: previousBrowserClientId });
+            }
+            this.browserClientMap[params.pluginName] = params.browserClientId;
+        });
+    }
+}
+//# sourceMappingURL=DevToolsPluginClientImplApp.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.js.map b/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.js.map
new file mode 100644
index 0000000..7ab544b
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientImplApp.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"DevToolsPluginClientImplApp.js","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClientImplApp.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DevToolsPluginClient,\n  DevToolsPluginMethod,\n  MESSAGE_PROTOCOL_VERSION,\n} from './DevToolsPluginClient';\nimport type { HandshakeMessageParams } from './devtools.types';\n\n/**\n * The DevToolsPluginClient for the app -> browser communication.\n */\nexport class DevToolsPluginClientImplApp extends DevToolsPluginClient {\n  // Map of pluginName -> browserClientId\n  private browserClientMap: Record<string, string> = {};\n\n  private static ws: WebSocket | null = null;\n  private static refCount: number = 0;\n\n  /**\n   * Initialize the connection.\n   * @hidden\n   */\n  override async initAsync(): Promise<void> {\n    if (DevToolsPluginClientImplApp.ws == null) {\n      DevToolsPluginClientImplApp.ws = await this.connectAsync();\n    }\n    DevToolsPluginClientImplApp.refCount += 1;\n    DevToolsPluginClientImplApp.ws.addEventListener('message', this.handleMessage);\n    this.addHandshakeHandler();\n  }\n\n  /**\n   * Close the connection.\n   */\n  override async closeAsync(): Promise<void> {\n    this.eventEmitter.removeAllListeners();\n    DevToolsPluginClientImplApp.ws?.removeEventListener('message', this.handleMessage);\n    DevToolsPluginClientImplApp.refCount -= 1;\n    if (DevToolsPluginClientImplApp.refCount < 1) {\n      DevToolsPluginClientImplApp.ws?.close();\n      DevToolsPluginClientImplApp.ws = null;\n    }\n  }\n\n  /**\n   * Send a message to the other end of DevTools.\n   * @param method A method name.\n   * @param params any extra payload.\n   */\n  override sendMessage(method: string, params: any): void {\n    if (!this.isConnected()) {\n      throw new Error('Unable to send message in a disconnected state.');\n    }\n\n    const payload: Record<string, any> = {\n      version: MESSAGE_PROTOCOL_VERSION,\n      pluginName: this.connectionInfo.pluginName,\n      method: DevToolsPluginMethod,\n      params: {\n        method,\n        params,\n      },\n    };\n    DevToolsPluginClientImplApp.ws?.send(JSON.stringify(payload));\n  }\n\n  /**\n   * Returns whether the client is connected to the server.\n   */\n  override isConnected(): boolean {\n    return DevToolsPluginClientImplApp.ws?.readyState === WebSocket.OPEN;\n  }\n\n  /**\n   * Get the WebSocket instance. Exposed for testing.\n   * @hidden\n   */\n  public static getWebSocket(): WebSocket | null {\n    return DevToolsPluginClientImplApp.ws;\n  }\n\n  /**\n   * Get the current reference count. Exposed for testing.\n   * @hidden\n   */\n  public static getRefCount(): number {\n    return DevToolsPluginClientImplApp.refCount;\n  }\n\n  private async connectAsync(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(`ws://${this.connectionInfo.devServer}/message`);\n      ws.addEventListener('open', () => {\n        resolve(ws);\n      });\n      ws.addEventListener('error', (e) => {\n        reject(e);\n      });\n      ws.addEventListener('close', (e: WebSocketCloseEvent) => {\n        console.debug('WebSocket closed', e.code, e.reason);\n        DevToolsPluginClientImplApp.ws = null;\n      });\n    });\n  }\n\n  private addHandshakeHandler() {\n    this.addMessageListener('handshake', (params: HandshakeMessageParams) => {\n      const previousBrowserClientId = this.browserClientMap[params.pluginName];\n      if (previousBrowserClientId != null && previousBrowserClientId !== params.browserClientId) {\n        console.debug(\n          `Terminate the previous browser client connection - previousBrowserClientId[${previousBrowserClientId}]`\n        );\n        this.sendMessage('terminateBrowserClient', { browserClientId: previousBrowserClientId });\n      }\n      this.browserClientMap[params.pluginName] = params.browserClientId;\n    });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.d.ts b/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.d.ts
new file mode 100644
index 0000000..2289c46
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.d.ts
@@ -0,0 +1,30 @@
+import { DevToolsPluginClient } from './DevToolsPluginClient';
+/**
+ * The DevToolsPluginClient for the browser -> app communication.
+ */
+export declare class DevToolsPluginClientImplBrowser extends DevToolsPluginClient {
+    private ws;
+    private browserClientId;
+    /**
+     * Initialize the connection.
+     * @hidden
+     */
+    initAsync(): Promise<void>;
+    /**
+     * Close the connection.
+     */
+    closeAsync(): Promise<void>;
+    /**
+     * Send a message to the other end of DevTools.
+     * @param method A method name.
+     * @param params any extra payload.
+     */
+    sendMessage(method: string, params: any, pluginNamespace?: string): void;
+    /**
+     * Returns whether the client is connected to the server.
+     */
+    isConnected(): boolean;
+    private startHandshake;
+    private connectAsync;
+}
+//# sourceMappingURL=DevToolsPluginClientImplBrowser.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.d.ts.map b/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.d.ts.map
new file mode 100644
index 0000000..6facb3a
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"DevToolsPluginClientImplBrowser.d.ts","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClientImplBrowser.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,oBAAoB,EAGrB,MAAM,wBAAwB,CAAC;AAEhC;;GAEG;AACH,qBAAa,+BAAgC,SAAQ,oBAAoB;IACvE,OAAO,CAAC,EAAE,CAA0B;IACpC,OAAO,CAAC,eAAe,CAAiC;IAExD;;;OAGG;IACY,SAAS,IAAI,OAAO,CAAC,IAAI,CAAC;IASzC;;OAEG;IACY,UAAU,IAAI,OAAO,CAAC,IAAI,CAAC;IAO1C;;;;OAIG;IACM,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,eAAe,CAAC,EAAE,MAAM,GAAG,IAAI;IAiBjF;;OAEG;IACM,WAAW,IAAI,OAAO;IAI/B,OAAO,CAAC,cAAc;YAgBR,YAAY;CAe3B"}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.js b/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.js
new file mode 100644
index 0000000..4dfce25
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.js
@@ -0,0 +1,84 @@
+import { DevToolsPluginClient, DevToolsPluginMethod, MESSAGE_PROTOCOL_VERSION, } from './DevToolsPluginClient';
+/**
+ * The DevToolsPluginClient for the browser -> app communication.
+ */
+export class DevToolsPluginClientImplBrowser extends DevToolsPluginClient {
+    ws = null;
+    browserClientId = Date.now().toString();
+    /**
+     * Initialize the connection.
+     * @hidden
+     */
+    async initAsync() {
+        if (this.ws == null) {
+            const ws = await this.connectAsync();
+            this.ws = ws;
+        }
+        this.ws.addEventListener('message', this.handleMessage);
+        this.startHandshake();
+    }
+    /**
+     * Close the connection.
+     */
+    async closeAsync() {
+        this.ws?.removeEventListener('message', this.handleMessage);
+        this.ws?.close();
+        this.ws = null;
+        this.eventEmitter.removeAllListeners();
+    }
+    /**
+     * Send a message to the other end of DevTools.
+     * @param method A method name.
+     * @param params any extra payload.
+     */
+    sendMessage(method, params, pluginNamespace) {
+        if (!this.isConnected()) {
+            throw new Error('Unable to send message in a disconnected state.');
+        }
+        const payload = {
+            version: MESSAGE_PROTOCOL_VERSION,
+            pluginName: this.connectionInfo.pluginName,
+            method: DevToolsPluginMethod,
+            params: {
+                method,
+                params,
+            },
+        };
+        this.ws?.send(JSON.stringify(payload));
+    }
+    /**
+     * Returns whether the client is connected to the server.
+     */
+    isConnected() {
+        return this.ws?.readyState === WebSocket.OPEN;
+    }
+    startHandshake() {
+        this.addMessageListener('terminateBrowserClient', (params) => {
+            if (this.browserClientId !== params.browserClientId) {
+                return;
+            }
+            console.debug('Received terminateBrowserClient messages and terminate the current connection');
+            this.closeAsync();
+        });
+        this.sendMessage('handshake', {
+            browserClientId: this.browserClientId,
+            pluginName: this.connectionInfo.pluginName,
+        });
+    }
+    async connectAsync() {
+        return new Promise((resolve, reject) => {
+            const ws = new WebSocket(`ws://${this.connectionInfo.devServer}/message`);
+            ws.addEventListener('open', () => {
+                resolve(ws);
+            });
+            ws.addEventListener('error', (e) => {
+                reject(e);
+            });
+            ws.addEventListener('close', (e) => {
+                console.debug('WebSocket closed', e.code, e.reason);
+                this.ws = null;
+            });
+        });
+    }
+}
+//# sourceMappingURL=DevToolsPluginClientImplBrowser.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.js.map b/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.js.map
new file mode 100644
index 0000000..2bbd87b
--- /dev/null
+++ b/node_modules/expo/build/devtools/DevToolsPluginClientImplBrowser.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"DevToolsPluginClientImplBrowser.js","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClientImplBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DevToolsPluginClient,\n  DevToolsPluginMethod,\n  MESSAGE_PROTOCOL_VERSION,\n} from './DevToolsPluginClient';\n\n/**\n * The DevToolsPluginClient for the browser -> app communication.\n */\nexport class DevToolsPluginClientImplBrowser extends DevToolsPluginClient {\n  private ws: WebSocket | null = null;\n  private browserClientId: string = Date.now().toString();\n\n  /**\n   * Initialize the connection.\n   * @hidden\n   */\n  override async initAsync(): Promise<void> {\n    if (this.ws == null) {\n      const ws = await this.connectAsync();\n      this.ws = ws;\n    }\n    this.ws.addEventListener('message', this.handleMessage);\n    this.startHandshake();\n  }\n\n  /**\n   * Close the connection.\n   */\n  override async closeAsync(): Promise<void> {\n    this.ws?.removeEventListener('message', this.handleMessage);\n    this.ws?.close();\n    this.ws = null;\n    this.eventEmitter.removeAllListeners();\n  }\n\n  /**\n   * Send a message to the other end of DevTools.\n   * @param method A method name.\n   * @param params any extra payload.\n   */\n  override sendMessage(method: string, params: any, pluginNamespace?: string): void {\n    if (!this.isConnected()) {\n      throw new Error('Unable to send message in a disconnected state.');\n    }\n\n    const payload: Record<string, any> = {\n      version: MESSAGE_PROTOCOL_VERSION,\n      pluginName: this.connectionInfo.pluginName,\n      method: DevToolsPluginMethod,\n      params: {\n        method,\n        params,\n      },\n    };\n    this.ws?.send(JSON.stringify(payload));\n  }\n\n  /**\n   * Returns whether the client is connected to the server.\n   */\n  override isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  private startHandshake() {\n    this.addMessageListener('terminateBrowserClient', (params) => {\n      if (this.browserClientId !== params.browserClientId) {\n        return;\n      }\n      console.debug(\n        'Received terminateBrowserClient messages and terminate the current connection'\n      );\n      this.closeAsync();\n    });\n    this.sendMessage('handshake', {\n      browserClientId: this.browserClientId,\n      pluginName: this.connectionInfo.pluginName,\n    });\n  }\n\n  private async connectAsync(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(`ws://${this.connectionInfo.devServer}/message`);\n      ws.addEventListener('open', () => {\n        resolve(ws);\n      });\n      ws.addEventListener('error', (e) => {\n        reject(e);\n      });\n      ws.addEventListener('close', (e: WebSocketCloseEvent) => {\n        console.debug('WebSocket closed', e.code, e.reason);\n        this.ws = null;\n      });\n    });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/devtools.types.d.ts b/node_modules/expo/build/devtools/devtools.types.d.ts
new file mode 100644
index 0000000..95e8956
--- /dev/null
+++ b/node_modules/expo/build/devtools/devtools.types.d.ts
@@ -0,0 +1,20 @@
+/**
+ * The connection info for devtools plugins client.
+ */
+export interface ConnectionInfo {
+    /** Indicates the sender towards the devtools plugin. */
+    sender: 'app' | 'browser';
+    /** Dev server address. */
+    devServer: string;
+    /** The plugin name. */
+    pluginName: string;
+}
+/**
+ * Parameters for the `handshake` message.
+ * @hidden
+ */
+export interface HandshakeMessageParams {
+    browserClientId: string;
+    pluginName: string;
+}
+//# sourceMappingURL=devtools.types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/devtools.types.d.ts.map b/node_modules/expo/build/devtools/devtools.types.d.ts.map
new file mode 100644
index 0000000..b3343f0
--- /dev/null
+++ b/node_modules/expo/build/devtools/devtools.types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"devtools.types.d.ts","sourceRoot":"","sources":["../../src/devtools/devtools.types.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,WAAW,cAAc;IAC7B,wDAAwD;IACxD,MAAM,EACF,KAAK,GACL,SAAS,CAAC;IAEd,0BAA0B;IAC1B,SAAS,EAAE,MAAM,CAAC;IAElB,uBAAuB;IACvB,UAAU,EAAE,MAAM,CAAC;CACpB;AAED;;;GAGG;AACH,MAAM,WAAW,sBAAsB;IACrC,eAAe,EAAE,MAAM,CAAC;IACxB,UAAU,EAAE,MAAM,CAAC;CACpB"}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/devtools.types.js b/node_modules/expo/build/devtools/devtools.types.js
new file mode 100644
index 0000000..a19b355
--- /dev/null
+++ b/node_modules/expo/build/devtools/devtools.types.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=devtools.types.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/devtools.types.js.map b/node_modules/expo/build/devtools/devtools.types.js.map
new file mode 100644
index 0000000..9138c4c
--- /dev/null
+++ b/node_modules/expo/build/devtools/devtools.types.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"devtools.types.js","sourceRoot":"","sources":["../../src/devtools/devtools.types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * The connection info for devtools plugins client.\n */\nexport interface ConnectionInfo {\n  /** Indicates the sender towards the devtools plugin. */\n  sender:\n    | 'app' // client running in the app environment.\n    | 'browser'; // client running in the browser environment.\n\n  /** Dev server address. */\n  devServer: string;\n\n  /** The plugin name. */\n  pluginName: string;\n}\n\n/**\n * Parameters for the `handshake` message.\n * @hidden\n */\nexport interface HandshakeMessageParams {\n  browserClientId: string;\n  pluginName: string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/getConnectionInfo.d.ts b/node_modules/expo/build/devtools/getConnectionInfo.d.ts
new file mode 100644
index 0000000..be0b562
--- /dev/null
+++ b/node_modules/expo/build/devtools/getConnectionInfo.d.ts
@@ -0,0 +1,6 @@
+/**
+ * Get the dev server address.
+ */
+import type { ConnectionInfo } from './devtools.types';
+export declare function getConnectionInfo(): Omit<ConnectionInfo, 'pluginName'>;
+//# sourceMappingURL=getConnectionInfo.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/getConnectionInfo.d.ts.map b/node_modules/expo/build/devtools/getConnectionInfo.d.ts.map
new file mode 100644
index 0000000..fb35502
--- /dev/null
+++ b/node_modules/expo/build/devtools/getConnectionInfo.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"getConnectionInfo.d.ts","sourceRoot":"","sources":["../../src/devtools/getConnectionInfo.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAEvD,wBAAgB,iBAAiB,IAAI,IAAI,CAAC,cAAc,EAAE,YAAY,CAAC,CAKtE"}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/getConnectionInfo.js b/node_modules/expo/build/devtools/getConnectionInfo.js
new file mode 100644
index 0000000..7b3aaba
--- /dev/null
+++ b/node_modules/expo/build/devtools/getConnectionInfo.js
@@ -0,0 +1,10 @@
+/**
+ * Get the dev server address.
+ */
+export function getConnectionInfo() {
+    return {
+        sender: 'browser',
+        devServer: window.location.origin.replace(/^https?:\/\//, ''),
+    };
+}
+//# sourceMappingURL=getConnectionInfo.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/getConnectionInfo.js.map b/node_modules/expo/build/devtools/getConnectionInfo.js.map
new file mode 100644
index 0000000..f49d447
--- /dev/null
+++ b/node_modules/expo/build/devtools/getConnectionInfo.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"getConnectionInfo.js","sourceRoot":"","sources":["../../src/devtools/getConnectionInfo.ts"],"names":[],"mappings":"AAAA;;GAEG;AAIH,MAAM,UAAU,iBAAiB;IAC/B,OAAO;QACL,MAAM,EAAE,SAAS;QACjB,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;KAC9D,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Get the dev server address.\n */\n\nimport type { ConnectionInfo } from './devtools.types';\n\nexport function getConnectionInfo(): Omit<ConnectionInfo, 'pluginName'> {\n  return {\n    sender: 'browser',\n    devServer: window.location.origin.replace(/^https?:\\/\\//, ''),\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/getConnectionInfo.native.d.ts b/node_modules/expo/build/devtools/getConnectionInfo.native.d.ts
new file mode 100644
index 0000000..eb9fffb
--- /dev/null
+++ b/node_modules/expo/build/devtools/getConnectionInfo.native.d.ts
@@ -0,0 +1,6 @@
+/**
+ * Get the dev server address.
+ */
+import type { ConnectionInfo } from './devtools.types';
+export declare function getConnectionInfo(): Omit<ConnectionInfo, 'pluginName'>;
+//# sourceMappingURL=getConnectionInfo.native.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/getConnectionInfo.native.d.ts.map b/node_modules/expo/build/devtools/getConnectionInfo.native.d.ts.map
new file mode 100644
index 0000000..dcb004f
--- /dev/null
+++ b/node_modules/expo/build/devtools/getConnectionInfo.native.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"getConnectionInfo.native.d.ts","sourceRoot":"","sources":["../../src/devtools/getConnectionInfo.native.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAEvD,wBAAgB,iBAAiB,IAAI,IAAI,CAAC,cAAc,EAAE,YAAY,CAAC,CAStE"}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/getConnectionInfo.native.js b/node_modules/expo/build/devtools/getConnectionInfo.native.js
new file mode 100644
index 0000000..2ad17af
--- /dev/null
+++ b/node_modules/expo/build/devtools/getConnectionInfo.native.js
@@ -0,0 +1,14 @@
+/**
+ * Get the dev server address.
+ */
+export function getConnectionInfo() {
+    const getDevServer = require('react-native/Libraries/Core/Devtools/getDevServer');
+    const devServer = getDevServer()
+        .url.replace(/^https?:\/\//, '')
+        .replace(/\/?$/, '');
+    return {
+        sender: 'app',
+        devServer,
+    };
+}
+//# sourceMappingURL=getConnectionInfo.native.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/getConnectionInfo.native.js.map b/node_modules/expo/build/devtools/getConnectionInfo.native.js.map
new file mode 100644
index 0000000..ce4641e
--- /dev/null
+++ b/node_modules/expo/build/devtools/getConnectionInfo.native.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"getConnectionInfo.native.js","sourceRoot":"","sources":["../../src/devtools/getConnectionInfo.native.ts"],"names":[],"mappings":"AAAA;;GAEG;AAIH,MAAM,UAAU,iBAAiB;IAC/B,MAAM,YAAY,GAAG,OAAO,CAAC,mDAAmD,CAAC,CAAC;IAClF,MAAM,SAAS,GAAG,YAAY,EAAE;SAC7B,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;SAC/B,OAAO,CAAC,MAAM,EAAE,EAAE,CAAW,CAAC;IACjC,OAAO;QACL,MAAM,EAAE,KAAK;QACb,SAAS;KACV,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Get the dev server address.\n */\n\nimport type { ConnectionInfo } from './devtools.types';\n\nexport function getConnectionInfo(): Omit<ConnectionInfo, 'pluginName'> {\n  const getDevServer = require('react-native/Libraries/Core/Devtools/getDevServer');\n  const devServer = getDevServer()\n    .url.replace(/^https?:\\/\\//, '')\n    .replace(/\\/?$/, '') as string;\n  return {\n    sender: 'app',\n    devServer,\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/index.d.ts b/node_modules/expo/build/devtools/index.d.ts
new file mode 100644
index 0000000..0b3164c
--- /dev/null
+++ b/node_modules/expo/build/devtools/index.d.ts
@@ -0,0 +1,10 @@
+import { DevToolsPluginClient } from './DevToolsPluginClient';
+/**
+ * Public API to get the DevToolsPluginClient instance.
+ */
+export declare function getDevToolsPluginClientAsync(pluginName: string): Promise<DevToolsPluginClient>;
+/**
+ * A React hook to get the DevToolsPluginClient instance.
+ */
+export declare function useDevToolsPluginClient(pluginName: string): DevToolsPluginClient | null;
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/index.d.ts.map b/node_modules/expo/build/devtools/index.d.ts.map
new file mode 100644
index 0000000..69f712d
--- /dev/null
+++ b/node_modules/expo/build/devtools/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/devtools/index.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAM9D;;GAEG;AACH,wBAAsB,4BAA4B,CAChD,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,oBAAoB,CAAC,CAgB/B;AAED;;GAEG;AACH,wBAAgB,uBAAuB,CAAC,UAAU,EAAE,MAAM,GAAG,oBAAoB,GAAG,IAAI,CAkCvF"}
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/index.js b/node_modules/expo/build/devtools/index.js
new file mode 100644
index 0000000..4dda3dd
--- /dev/null
+++ b/node_modules/expo/build/devtools/index.js
@@ -0,0 +1,57 @@
+import { useState, useEffect } from 'react';
+import { createDevToolsPluginClient } from './DevToolsPluginClientFactory';
+import { getConnectionInfo } from './getConnectionInfo';
+const instanceMap = {};
+/**
+ * Public API to get the DevToolsPluginClient instance.
+ */
+export async function getDevToolsPluginClientAsync(pluginName) {
+    const connectionInfo = getConnectionInfo();
+    let instance = instanceMap[pluginName];
+    if (instance != null &&
+        (instance.isConnected() === false ||
+            instance.connectionInfo.devServer !== connectionInfo.devServer)) {
+        await instance.closeAsync();
+        delete instanceMap[pluginName];
+    }
+    if (instance == null) {
+        instance = await createDevToolsPluginClient({ ...connectionInfo, pluginName });
+        instanceMap[pluginName] = instance;
+    }
+    return instance;
+}
+/**
+ * A React hook to get the DevToolsPluginClient instance.
+ */
+export function useDevToolsPluginClient(pluginName) {
+    const [client, setClient] = useState(null);
+    const [error, setError] = useState(null);
+    useEffect(() => {
+        async function setup() {
+            try {
+                const client = await getDevToolsPluginClientAsync(pluginName);
+                setClient(client);
+            }
+            catch (e) {
+                setError(new Error('Failed to setup client from useDevToolsPluginClient: ' + e.toString()));
+            }
+        }
+        async function teardown() {
+            try {
+                await client?.closeAsync();
+            }
+            catch (e) {
+                setError(new Error('Failed to teardown client from useDevToolsPluginClient: ' + e.toString()));
+            }
+        }
+        setup();
+        return () => {
+            teardown();
+        };
+    }, [pluginName]);
+    if (error != null) {
+        throw error;
+    }
+    return client;
+}
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/expo/build/devtools/index.js.map b/node_modules/expo/build/devtools/index.js.map
new file mode 100644
index 0000000..43434f5
--- /dev/null
+++ b/node_modules/expo/build/devtools/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/devtools/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAG5C,OAAO,EAAE,0BAA0B,EAAE,MAAM,+BAA+B,CAAC;AAC3E,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD,MAAM,WAAW,GAAyC,EAAE,CAAC;AAE7D;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,UAAkB;IAElB,MAAM,cAAc,GAAG,iBAAiB,EAAE,CAAC;IAC3C,IAAI,QAAQ,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;IACvC,IACE,QAAQ,IAAI,IAAI;QAChB,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,KAAK;YAC/B,QAAQ,CAAC,cAAc,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,CAAC,EACjE;QACA,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC5B,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC;KAChC;IACD,IAAI,QAAQ,IAAI,IAAI,EAAE;QACpB,QAAQ,GAAG,MAAM,0BAA0B,CAAC,EAAE,GAAG,cAAc,EAAE,UAAU,EAAE,CAAC,CAAC;QAC/E,WAAW,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;KACpC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,uBAAuB,CAAC,UAAkB;IACxD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAA8B,IAAI,CAAC,CAAC;IACxE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAe,IAAI,CAAC,CAAC;IAEvD,SAAS,CAAC,GAAG,EAAE;QACb,KAAK,UAAU,KAAK;YAClB,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,4BAA4B,CAAC,UAAU,CAAC,CAAC;gBAC9D,SAAS,CAAC,MAAM,CAAC,CAAC;aACnB;YAAC,OAAO,CAAC,EAAE;gBACV,QAAQ,CAAC,IAAI,KAAK,CAAC,uDAAuD,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;aAC7F;QACH,CAAC;QAED,KAAK,UAAU,QAAQ;YACrB,IAAI;gBACF,MAAM,MAAM,EAAE,UAAU,EAAE,CAAC;aAC5B;YAAC,OAAO,CAAC,EAAE;gBACV,QAAQ,CACN,IAAI,KAAK,CAAC,0DAA0D,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CACrF,CAAC;aACH;QACH,CAAC;QAED,KAAK,EAAE,CAAC;QACR,OAAO,GAAG,EAAE;YACV,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,MAAM,KAAK,CAAC;KACb;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { DevToolsPluginClient } from './DevToolsPluginClient';\nimport { createDevToolsPluginClient } from './DevToolsPluginClientFactory';\nimport { getConnectionInfo } from './getConnectionInfo';\n\nconst instanceMap: Record<string, DevToolsPluginClient> = {};\n\n/**\n * Public API to get the DevToolsPluginClient instance.\n */\nexport async function getDevToolsPluginClientAsync(\n  pluginName: string\n): Promise<DevToolsPluginClient> {\n  const connectionInfo = getConnectionInfo();\n  let instance = instanceMap[pluginName];\n  if (\n    instance != null &&\n    (instance.isConnected() === false ||\n      instance.connectionInfo.devServer !== connectionInfo.devServer)\n  ) {\n    await instance.closeAsync();\n    delete instanceMap[pluginName];\n  }\n  if (instance == null) {\n    instance = await createDevToolsPluginClient({ ...connectionInfo, pluginName });\n    instanceMap[pluginName] = instance;\n  }\n  return instance;\n}\n\n/**\n * A React hook to get the DevToolsPluginClient instance.\n */\nexport function useDevToolsPluginClient(pluginName: string): DevToolsPluginClient | null {\n  const [client, setClient] = useState<DevToolsPluginClient | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    async function setup() {\n      try {\n        const client = await getDevToolsPluginClientAsync(pluginName);\n        setClient(client);\n      } catch (e) {\n        setError(new Error('Failed to setup client from useDevToolsPluginClient: ' + e.toString()));\n      }\n    }\n\n    async function teardown() {\n      try {\n        await client?.closeAsync();\n      } catch (e) {\n        setError(\n          new Error('Failed to teardown client from useDevToolsPluginClient: ' + e.toString())\n        );\n      }\n    }\n\n    setup();\n    return () => {\n      teardown();\n    };\n  }, [pluginName]);\n\n  if (error != null) {\n    throw error;\n  }\n  return client;\n}\n"]}
\ No newline at end of file
